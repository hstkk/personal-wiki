#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PersonalWiki
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class Database : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertRevision(Revision instance);
    partial void UpdateRevision(Revision instance);
    partial void DeleteRevision(Revision instance);
    #endregion
		
		public Database(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Database(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Database(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Database(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Page> Page
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
		
		public System.Data.Linq.Table<Project> Project
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Revision> Revision
		{
			get
			{
				return this.GetTable<Revision>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PageId;
		
		private string _PageTitle;
		
		private System.Data.Linq.Binary _PageArchived;
		
		private System.Data.Linq.Binary _PageTrash;
		
		private int _ProjectId;
		
		private EntitySet<Revision> _Revision;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageIdChanging(int value);
    partial void OnPageIdChanged();
    partial void OnPageTitleChanging(string value);
    partial void OnPageTitleChanged();
    partial void OnPageArchivedChanging(System.Data.Linq.Binary value);
    partial void OnPageArchivedChanged();
    partial void OnPageTrashChanging(System.Data.Linq.Binary value);
    partial void OnPageTrashChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    #endregion
		
		public Page()
		{
			this._Revision = new EntitySet<Revision>(new Action<Revision>(this.attach_Revision), new Action<Revision>(this.detach_Revision));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageTitle", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PageTitle
		{
			get
			{
				return this._PageTitle;
			}
			set
			{
				if ((this._PageTitle != value))
				{
					this.OnPageTitleChanging(value);
					this.SendPropertyChanging();
					this._PageTitle = value;
					this.SendPropertyChanged("PageTitle");
					this.OnPageTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageArchived", DbType="Binary(1)")]
		public System.Data.Linq.Binary PageArchived
		{
			get
			{
				return this._PageArchived;
			}
			set
			{
				if ((this._PageArchived != value))
				{
					this.OnPageArchivedChanging(value);
					this.SendPropertyChanging();
					this._PageArchived = value;
					this.SendPropertyChanged("PageArchived");
					this.OnPageArchivedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageTrash", DbType="Binary(1)")]
		public System.Data.Linq.Binary PageTrash
		{
			get
			{
				return this._PageTrash;
			}
			set
			{
				if ((this._PageTrash != value))
				{
					this.OnPageTrashChanging(value);
					this.SendPropertyChanging();
					this._PageTrash = value;
					this.SendPropertyChanged("PageTrash");
					this.OnPageTrashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL")]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_Revision", Storage="_Revision", ThisKey="PageId", OtherKey="PageId")]
		public EntitySet<Revision> Revision
		{
			get
			{
				return this._Revision;
			}
			set
			{
				this._Revision.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Page", Storage="_Project", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Page.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Page.Add(this);
						this._ProjectId = value.ProjectId;
					}
					else
					{
						this._ProjectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Revision(Revision entity)
		{
			this.SendPropertyChanging();
			entity.Page = this;
		}
		
		private void detach_Revision(Revision entity)
		{
			this.SendPropertyChanging();
			entity.Page = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectId;
		
		private string _ProjectTitle;
		
		private EntitySet<Page> _Page;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnProjectTitleChanging(string value);
    partial void OnProjectTitleChanged();
    #endregion
		
		public Project()
		{
			this._Page = new EntitySet<Page>(new Action<Page>(this.attach_Page), new Action<Page>(this.detach_Page));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTitle", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ProjectTitle
		{
			get
			{
				return this._ProjectTitle;
			}
			set
			{
				if ((this._ProjectTitle != value))
				{
					this.OnProjectTitleChanging(value);
					this.SendPropertyChanging();
					this._ProjectTitle = value;
					this.SendPropertyChanged("ProjectTitle");
					this.OnProjectTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Page", Storage="_Page", ThisKey="ProjectId", OtherKey="ProjectId")]
		public EntitySet<Page> Page
		{
			get
			{
				return this._Page;
			}
			set
			{
				this._Page.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Page(Page entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Page(Page entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Revision : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RevisionId;
		
		private string _RevisionText;
		
		private System.DateTime _RevisionTimestamp;
		
		private int _PageId;
		
		private EntityRef<Page> _Page;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRevisionIdChanging(int value);
    partial void OnRevisionIdChanged();
    partial void OnRevisionTextChanging(string value);
    partial void OnRevisionTextChanged();
    partial void OnRevisionTimestampChanging(System.DateTime value);
    partial void OnRevisionTimestampChanged();
    partial void OnPageIdChanging(int value);
    partial void OnPageIdChanged();
    #endregion
		
		public Revision()
		{
			this._Page = default(EntityRef<Page>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevisionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RevisionId
		{
			get
			{
				return this._RevisionId;
			}
			set
			{
				if ((this._RevisionId != value))
				{
					this.OnRevisionIdChanging(value);
					this.SendPropertyChanging();
					this._RevisionId = value;
					this.SendPropertyChanged("RevisionId");
					this.OnRevisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevisionText", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RevisionText
		{
			get
			{
				return this._RevisionText;
			}
			set
			{
				if ((this._RevisionText != value))
				{
					this.OnRevisionTextChanging(value);
					this.SendPropertyChanging();
					this._RevisionText = value;
					this.SendPropertyChanged("RevisionText");
					this.OnRevisionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevisionTimestamp", DbType="DateTime NOT NULL")]
		public System.DateTime RevisionTimestamp
		{
			get
			{
				return this._RevisionTimestamp;
			}
			set
			{
				if ((this._RevisionTimestamp != value))
				{
					this.OnRevisionTimestampChanging(value);
					this.SendPropertyChanging();
					this._RevisionTimestamp = value;
					this.SendPropertyChanged("RevisionTimestamp");
					this.OnRevisionTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageId", DbType="Int NOT NULL")]
		public int PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					if (this._Page.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_Revision", Storage="_Page", ThisKey="PageId", OtherKey="PageId", IsForeignKey=true)]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.Revision.Remove(this);
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.Revision.Add(this);
						this._PageId = value.PageId;
					}
					else
					{
						this._PageId = default(int);
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
